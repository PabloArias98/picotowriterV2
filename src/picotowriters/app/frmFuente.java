/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package picotowriters.app;

import java.awt.Color;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JTextPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.Element;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Pablo
 */
public class frmFuente extends javax.swing.JFrame {

    /**
     * Creates new form frmFuente
     */
    private String[] fontNames;
    private JTextPane panelActual;
    private boolean es_cursiva, es_negrita;
    private String fuente_seleccionada;
    private int tamaño_seleccionado;
    private SimpleAttributeSet attributeSet;
    private JLabel jTextFuente, jTextTamano;
    public frmFuente() {
        initComponents();
    }
    
    public frmFuente(
            String _fuente_seleccionada,
            int _tamaño_seleccionado,
            SimpleAttributeSet _attributeSet, 
            boolean _es_cursiva, 
            boolean _es_negrita, 
            JLabel _jTextFuente, 
            JLabel _jTextTamano, 
            String[] _fontNames, 
            JTextPane _jTextPane1){
        initComponents();
        
                    this.setIconImage(java.awt.Toolkit.getDefaultToolkit()
            .getImage(getClass().getResource("/picotowriters/icons/icon_rtf.png").getFile()));
        this.fontNames = _fontNames;
        this.panelActual = _jTextPane1;
         //Rellenamos el comboBox de las fuentes
        for (String font : fontNames) {
            selectorFuente.addItem(font);
        }
        //Rellenamos el comboBox de los tamaños
        for (int i = 8; i < 80; i++) {
            selectorTamano.addItem(String.valueOf(i));
        }
        
        this.fuente_seleccionada = _fuente_seleccionada;
        this.tamaño_seleccionado = _tamaño_seleccionado;
        this.attributeSet = _attributeSet;
        this.es_cursiva = _es_cursiva;
        this.es_negrita = _es_negrita;
        this.jTextFuente = _jTextFuente;
        this.jTextTamano = _jTextTamano;
        
        for (int i = 0; i < selectorFuente.getItemCount(); i++)
        {
            String obj = selectorFuente.getItemAt(i);
            if (obj.equals(fuente_seleccionada))
            {
                selectorFuente.setSelectedIndex(i);
                break;
            }
        }
        for (int i = 0; i < selectorTamano.getItemCount(); i++)
        {
            String obj = selectorTamano.getItemAt(i);
            if (obj.equals(tamaño_seleccionado))
            {
                selectorTamano.setSelectedIndex(i);
                break;
            }
        }
        selectorFuente.setSelectedItem(fuente_seleccionada);
        selectorTamano.setSelectedItem(tamaño_seleccionado);
    }
            

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonAceptar = new javax.swing.JButton();
        selectorFuente = new javax.swing.JComboBox<>();
        jTxtFuente = new javax.swing.JLabel();
        selectorTamano = new javax.swing.JComboBox<>();
        jButtonDefecto = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cambiar fuente");

        jButtonAceptar.setText("Aceptar");
        jButtonAceptar.setToolTipText("");
        jButtonAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAceptarActionPerformed(evt);
            }
        });

        selectorFuente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorFuenteActionPerformed(evt);
            }
        });

        jTxtFuente.setText("A continuación, seleccione la fuente y el tamaño que desea agregar al texto:");
        jTxtFuente.setToolTipText("");

        selectorTamano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorTamanoActionPerformed(evt);
            }
        });

        jButtonDefecto.setText("Por defecto");
        jButtonDefecto.setToolTipText("");
        jButtonDefecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDefectoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTxtFuente, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectorFuente, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectorTamano, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonDefecto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonAceptar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTxtFuente, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(selectorTamano)
                            .addComponent(selectorFuente, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonAceptar)
                            .addComponent(jButtonDefecto))
                        .addContainerGap())))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAceptarActionPerformed
        // TODO add your handling code here:
        selectorFuente.setSelectedItem(selectorFuente.getSelectedItem());
        jTextFuente.setText(selectorFuente.getSelectedItem().toString());
        jTextTamano.setText(selectorTamano.getSelectedItem().toString());
        dispose();
    }//GEN-LAST:event_jButtonAceptarActionPerformed

    private void selectorFuenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorFuenteActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        //Coloco en una variable temporal "fuente_seleccionada" la fuente elegida de la cajita
        fuente_seleccionada = selectorFuente.getSelectedItem().toString();
        StyledDocument doc = (StyledDocument) panelActual.getDocument();
        int selectionEnd = panelActual.getSelectionEnd();
        int selectionStart = panelActual.getSelectionStart();
        if (selectionStart == selectionEnd) {       //Si voy a escribir cambio la fuente
            attributeSet = new SimpleAttributeSet();
            //Respeto la fuente, tamaño de fuente y el color de letra que había para aplicar la fuente
            StyleConstants.setFontFamily(attributeSet, fuente_seleccionada);
            StyleConstants.setFontSize(attributeSet, tamaño_seleccionado);
            //StyleConstants.setForeground(attributeSet, color_seleccionado);
            //Respeto ahora los estilos con los que estoy escribiendo
            if (es_negrita == true) {
                StyleConstants.setBold(attributeSet, true);
            } else if (es_cursiva == true) {
                StyleConstants.setItalic(attributeSet, true);
            } else if (es_cursiva == true && es_negrita == true) {
                StyleConstants.setBold(attributeSet, true);
                StyleConstants.setItalic(attributeSet, true);
            }
            panelActual.setCharacterAttributes(attributeSet, true);
        } else {      //Para cambiar la fuente a lo seleccionado
            Element element = doc.getCharacterElement(selectionStart);
            AttributeSet as = element.getAttributes();
            MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());
            //Respeto la fuente y el tamaño de cada carácter de la selección
            StyleConstants.setFontFamily(asNew, fuente_seleccionada);
            StyleConstants.setFontSize(asNew, tamaño_seleccionado);
            //Respeto los diferentes estilos de los caracteres seleccionados
            if (es_negrita == true) {
                StyleConstants.setBold(asNew, true);
            } else if (es_cursiva == true) {
                StyleConstants.setItalic(asNew, true);
            } else if (es_cursiva == true && es_negrita == true) {
                StyleConstants.setBold(asNew, true);
                StyleConstants.setItalic(asNew, true);
            }
            //Aplico la fuente a la selección
            doc.setCharacterAttributes(selectionStart, panelActual.getSelectedText().length(), asNew, true);
        }
    }//GEN-LAST:event_selectorFuenteActionPerformed

    private void selectorTamanoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorTamanoActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        // Elijo el tamaño de la cajita y lo coloco en una variable temporal "tamaño_seleccionado"
        tamaño_seleccionado = Integer.parseInt(selectorTamano.getSelectedItem().toString());
        StyledDocument doc = (StyledDocument) panelActual.getDocument();
        int selectionEnd = panelActual.getSelectionEnd();
        int selectionStart = panelActual.getSelectionStart();
        if (selectionStart == selectionEnd) { //Si voy a escribir cambio el tamaño
            attributeSet = new SimpleAttributeSet();
            //Respeto el color que estaba aplicado ya
           // StyleConstants.setForeground(attributeSet, color_seleccionado);
            StyleConstants.setFontSize(attributeSet, tamaño_seleccionado);
            panelActual.setCharacterAttributes(attributeSet, true);

        } else {      //Para cambiar el tamaño de lo seleccionado

            for (int i = selectionStart; i < selectionEnd; i++) {
                Element element = doc.getCharacterElement(i);
                AttributeSet as = element.getAttributes();
                MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());

                StyleConstants.setFontSize(asNew, tamaño_seleccionado);
                /* Al cambiar el tamaño de una selección tengo que respetar los estilos que estaban aplicados en cada
                carácter, de lo contrario, se pondrían todos con el último estilo aplicado */
                if (es_negrita == true) {
                    StyleConstants.setBold(asNew, true);
                } else if (es_cursiva == true) {
                    StyleConstants.setItalic(asNew, true);
                } else if (es_cursiva == true && es_negrita == true) {
                    StyleConstants.setBold(asNew, true);
                    StyleConstants.setItalic(asNew, true);
                }
                //Voy aplicando el tamaño por cada caracter
                doc.setCharacterAttributes(i, 1, asNew, true);
            }
        }
    }//GEN-LAST:event_selectorTamanoActionPerformed

    private void jButtonDefectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDefectoActionPerformed
        // TODO add your handling code here:
        fuente_seleccionada = "Arial";
        tamaño_seleccionado = 14;
        selectorFuente.setSelectedItem(fuente_seleccionada);
        selectorTamano.setSelectedItem(String.valueOf(tamaño_seleccionado));
    }//GEN-LAST:event_jButtonDefectoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmFuente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmFuente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmFuente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmFuente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmFuente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAceptar;
    private javax.swing.JButton jButtonDefecto;
    private javax.swing.JLabel jTxtFuente;
    private javax.swing.JComboBox<String> selectorFuente;
    private javax.swing.JComboBox<String> selectorTamano;
    // End of variables declaration//GEN-END:variables
}
